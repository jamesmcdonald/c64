; play every note

    incdir "../include"
    include "c64_loader.dasm"

init:
    jsr cint

    jsr clearsid

;;; init sid
    lda volume
    sta sid+$18

    lda #$09
    sta sid+$5    ; set sid voice 1 a/d
    lda #$f0
    sta sid+$6    ; set sid voice 1 s/r

    lda #$00
    sta sid       ; voice 1 low freq
    lda #$00
    sta sid+$01   ; voice 1 high freq

;;; draw UI
    lda #$00              ; load zero-page vectors for screen, colour and ui
    sta $fb
    sta $f9
    lda #$04
    sta $fc
    lda #$d8
    sta $fa
    lda #<ui
    sta $fd
    lda #>ui
    sta $fe
ui_line:
    ldy #$00
    lda ($fd),y
    beq ui_end
ui_char:
    cmp #$40
    bmi ui_char_mapped
    cmp #$60
    bpl ui_char_mapped
    sec
    sbc #$40      ; map letters to screen codes
ui_char_mapped:
    sta ($fb),y
    lda uicolor
    sta ($f9),y
    iny
    lda ($fd),y
    bne ui_char
    lda $fb       ; update write position
    clc
    adc #$28      ; add one screen line
    sta $fb
    sta $f9
    bcc ui_update_read
    lda $fc
    adc #$00
    sta $fc
    lda $fa
    sec
    adc #$00
    sta $fa
ui_update_read:
    iny          ; point y to next read line
    tya          ; add y to read vector
    clc
    adc $fd
    sta $fd
    bcc ui_line
    lda $fe
    adc #$00
    sta $fe
    jmp ui_line
ui_end

loop:
;;; update UI
    lda low
    ldx #$02
    ldy #$0c
    jsr hexposprint
    lda high
    ldx #$02
    ldy #$0a
    jsr hexposprint
    lda rate
    ldx #$02
    ldy #$1a
    jsr hexposprint
    lda pulse+1
    ldx #$08
    ldy #$0c
    jsr hexposprint
    lda pulse
    ldx #$08
    ldy #$0e
    jsr hexposprint
    lda volume
    ldx #$0b
    ldy #$07
    jsr hexposprint
    ldx #$02
    ldy #$13
    clc
    jsr plot
    lda direction
    adc #$30
    jsr chrout
    ldx #$05
    ldy #$0a
    clc
    jsr plot
    lda wave
    cmp #$10
    beq ui_triangle
    cmp #$20
    beq ui_sawtooth
    cmp #$40
    beq ui_pulse
    cmp #$80
    beq ui_noise
    jmp ui_after_wave
ui_triangle:
    ldx #<n_triangle
    ldy #>n_triangle
    jmp ui_print_wave
ui_sawtooth:
    ldx #<n_sawtooth
    ldy #>n_sawtooth
    jmp ui_print_wave
ui_pulse:
    ldx #<n_pulse
    ldy #>n_pulse
    jmp ui_print_wave
ui_noise:
    ldx #<n_noise
    ldy #>n_noise
    jmp ui_print_wave
ui_print_wave:
    jsr print
ui_after_wave:

;;; scan keyboard
    jsr getin
    cmp #$0
    bne .+5
    jmp afterkey
    cmp #$51             ; q - quit
    bne .+5              ; +5 because . points at 'bne'
    jmp quit
    cmp #$58             ; x - increase rate
    bne .+7
    ldx #$01
    jmp incrate
    cmp #$d8             ; X - increase rate more
    bne .+7
    ldx #$10
    jmp incrate
    cmp #$5a             ; z - decrease rate
    bne .+7
    ldx #$01
    jmp decrate
    cmp #$da             ; Z - decrease rate more
    bne .+7
    ldx #$10
    jmp decrate
    cmp #$56             ; v - increase pulse
    bne .+7
    ldx #$01
    jmp incpulse
    cmp #$d6             ; V - increase pulse more
    bne .+7
    ldx #$10
    jmp incpulse
    cmp #$43             ; c - decrease pulse
    bne .+7
    ldx #$01
    jmp decpulse
    cmp #$c3             ; C - decrease pulse more
    bne .+7
    ldx #$10
    jmp decpulse
    cmp #$44             ; d - switch direction
    bne .+5
    jmp invdir
    cmp #$54             ; t - triangle thief
    bne .+7
    ldx #$10
    jmp setwave
    cmp #$53             ; s - sawtooth
    bne .+7
    ldx #$20
    jmp setwave
    cmp #$50             ; p - pulse
    bne .+7
    ldx #$40
    jmp setwave
    cmp #$4e             ; n - noise
    bne .+7
    ldx #$80
    jmp setwave
    cmp #$20
    bne .+5
    jmp mute
keydefault:
    ldx #$14             ; print the keycode for unknown keys
    ldy #0
    jsr hexposprint
    jmp afterkey

quit:
    jsr clearsid
    jsr cint
    rts

incrate:
    txa
    clc
    adc rate
    sta rate
    jmp afterkey

decrate:
    stx $fb
    lda rate
    sec
    sbc $fb
    sta rate
    jmp afterkey

incpulse:
    txa
    clc
    adc pulse
    sta pulse
    lda pulse+1
    adc #$00
    and #$0f
    sta pulse+1
    jmp afterkey

decpulse:
    stx $fb
    lda pulse
    sec
    sbc $fb
    sta pulse
    lda pulse+1
    sbc #$00
    and #$0f
    sta pulse+1
    jmp afterkey

invdir:
    lda direction
    eor #$01
    sta direction
    jmp afterkey

setwave:
    stx wave
    jmp afterkey

mute:
    lda volume
    eor #$0f
    sta volume
    sta sid+$18
    jmp afterkey

afterkey:

; wait for scanline
scanwait:
    lda $d011
    and #$80
    bne scanwait
	lda $d012
    cmp #$f9
    bne scanwait

    lda pulse
    sta sid+$02   ; set pulse wave modulation low
    lda pulse+1
    sta sid+$03   ; set pulse wave modulation high
   
    lda wave
    ora #$01
    sta sid+$04   ; bring the noise (wave+enable, voice 1)

    lda direction
    beq direction_down
direction_up:
    lda low
    clc
    adc rate
    sta low
    sta sid
    lda high
    adc #$00
    sta high
    sta sid+1
    jmp loop
direction_down:
    lda low
    sec
    sbc rate
    sta low
    sta sid
    lda high
    sbc #$00
    sta high
    sta sid+1
    jmp loop
    
end:
    jsr clearsid
    jmp quit

clearsid:
;;; clear sid
    ldx #$18
    lda #$00
clearsid_loop:
    sta sid,x
    dex
    bpl clearsid_loop
    rts

low dc $00
high dc $04
rate dc $00
wave dc $10
direction dc $01 ; 1 for up or 0 for down
pulse dc $00,$03
volume dc $00

ui dc "        --- THE GLISSANDATOR ---        ", 0
   dc " ", 0
   dc "FREQUENCY      DIR   RATE", 0
   dc "               (D)   (Z/X)", 0
   dc " ", 0
   dc "WAVE FORM", 0
   dc "(T/S/P/N)", 0
   dc " ", 0
   dc "PULSE WIDTH", 0
   dc "  (C/V)", 0
   dc " ", 0
   dc "VOLUME", 0
   dc "(SPACE)", 0
   dc 0
uicolor dc #$03
n_triangle  dc "TRIANGLE   ", 0
n_sawtooth  dc "SAWTOOTH   ", 0
n_pulse     dc "PULSE WAVE ", 0
n_noise     dc "WHITE NOISE", 0


    include "debug.dasm"
