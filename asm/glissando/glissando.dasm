; play every note

    incdir "../include"
    include "c64_loader.dasm"

init:
    jsr cint

    jsr clearsid

;;; init sid
    lda #$f
    sta sid+$18   ; why turn it up to 11 if you can turn it to 24?

    lda #$09
    sta sid+$5    ; set sid voice 1 a/d
    lda #$f0
    sta sid+$6    ; set sid voice 1 s/r

    lda #$00
    sta sid       ; voice 1 low freq
    lda #$00
    sta sid+$01   ; voice 1 high freq

    lda #$03
    sta sid+$03   ; set pulse wave modulation
   
;;; draw UI
    lda #$00              ; load zero-page vectors for screen, colour and ui
    sta $fb
    sta $f9
    lda #$04
    sta $fc
    lda #$d8
    sta $fa
    lda #<ui
    sta $fd
    lda #>ui
    sta $fe
ui_line:
    ldy #$00
    lda ($fd),y
    beq ui_end
ui_char:
    cmp #$40
    bmi ui_char_mapped
    cmp #$60
    bpl ui_char_mapped
    sec
    sbc #$40      ; map letters to screen codes
ui_char_mapped:
    sta ($fb),y
    lda uicolor
    sta ($f9),y
    iny
    lda ($fd),y
    bne ui_char
    lda $fb       ; update write position
    clc
    adc #$28      ; add one screen line
    sta $fb
    sta $f9
    bcc ui_update_read
    lda $fc
    adc #$00
    sta $fc
    lda $fa
    sec
    adc #$00
    sta $fa
ui_update_read:
    iny          ; point y to next read line
    tya          ; add y to read vector
    clc
    adc $fd
    sta $fd
    bcc ui_line
    lda $fe
    adc #$00
    sta $fe
    jmp ui_line
ui_end

loop:
;;; update UI
    lda low
    ldx #$02
    ldy #$0c
    jsr hexposprint
    lda high
    ldx #$02
    ldy #$0a
    jsr hexposprint
    lda rate
    ldx #$02
    ldy #$1a
    jsr hexposprint
    ldx #$02
    ldy #$13
    clc
    jsr plot
    lda direction
    adc #$30
    jsr chrout

;;; scan keyboard
    jsr getin
    cmp #$0
    beq afterkey
    cmp #$51             ; q pressed, exit
    bne .+5              ; +5 because . points at 'bne'
    jmp quit
    cmp #$58             ; increase rate on x
    bne .+5
    jmp incrate
    cmp #$5a             ; decrease rate on z
    bne .+5
    jmp decrate
    cmp #$44
    bne .+5
    jmp invdir
keydefault:
    ldx #$14
    ldy #0
    jsr hexposprint
    jmp afterkey

quit:
    jsr clearsid
    jsr cint
    rts

incrate:
    lda rate
    clc
    adc #$01
    sta rate
    jmp afterkey

decrate:
    lda rate
    sec
    sbc #$01
    sta rate
    jmp afterkey

invdir:
    lda direction
    eor #$01
    sta direction

afterkey:

; wait for scanline
scanwait:
    lda $d011
    and #$80
    bne scanwait
	lda $d012
    cmp #$f9
    bne scanwait

    lda wave
    ora #$01
    sta sid+$04   ; bring the noise (wave+enable, voice 1)

    lda low
    clc
    adc rate
    sta low
    sta sid
    bcc skiphigh
    lda high
    adc #$00
    ;bcs end
    sta high
    sta sid+1
skiphigh:
    jmp loop
    
end:
    jsr clearsid
    jmp quit

clearsid:
;;; clear sid
    ldx #$18
    lda #$00
clearsid_loop:
    sta sid,x
    dex
    bpl clearsid_loop
    rts

low dc #$00
high dc #$00
rate dc #$01
wave dc #$10
direction dc #$01 ; 1 for up or 0 for down

ui dc "        --- THE GLISSANDATOR ---        ", 0
   dc " ", 0
   dc "FREQUENCY      DIR   RATE", 0
   dc "               (D)   (Z/X)", 0
   dc " ", 0
   dc "WAVE FORM", 0
   dc "(T/S/P/N)", 0
   dc " ", 0
   dc "PULSE WIDTH", 0
   dc "  (C/V)", 0
   dc 0
uicolor dc #$03

    include "debug.dasm"
